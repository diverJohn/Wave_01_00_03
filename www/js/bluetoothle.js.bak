//
//  bluetooth LE functions for the Rand Dusing Phonegap Plugin
//
//  Flow:
//
//    StartBluetooth()     (Called from main...)
//      bluetoothle.initialize(initializeSuccess, initializeError, paramsObj)
//        initializeSuccess()
//          BluetoothLoop()
//
//    BluetoothLoop()         (Called every 5 sec if not cnx, 15 sec if cnx)
//      bluetoothle.isConnected( isConnectedCallback )
//        isConnectedCallback()
//          if connected
//            UpdateBluetoothIcon(true)
//            setTimeout(BluetoothLoop, 15000)
//            if not subscribed
//              DiscoverBluetoothdevice()
//          else
//            UpdateBluetothIcon(false)
//            setTimeout(BluetoothLoop, 5000)
//            StartBluetoothScan()
//          end
//
//    StartBluetoothScan()
//      bluetoothle.startScan(startScanSuccess, startScanError, paramsObj)  
//        startScanSuccess()
//          bluetoothle.stopScan(stopScanSuccess, stopScanError)
//          ConnectBluetoothDevice(obj.address)
//
//    ConnectBluetoothDevice(address)
//      bluetoothle.connect(connectSuccess, connectError, paramsObj)
//        connectSuccess()
//          UpdateBluetoothIcon(true)
//          DiscoverBluetoothDevice()      
//
//
//    DiscoverBluetoothDevice()
//      if IOS
//        bluetoothle.services(servicesIosSuccess, servicesIosError, paramsObj);
//          servicesIosSuccess()
//            bluetoothle.characteristics(characteristicsIosSuccess, characteristicsIosError, paramsObj);
//              characteristicsIosSuccess()
//                if Tx Characteristic
//                  bluetoothle.descriptors(descriptorsIosTxSuccess, descriptorsIosTxError, paramsObj);
//                else if Rx Characteristic
//                  bluetoothle.descriptors(descriptorsIosRxSuccess, descriptorsIosRxError, paramsObj);
//        
//        descriptorsIosTxSuccess()
//          SubscribeBluetoothDevice()
//
//        descriptorsIosRxSuccess()
//          do nothing
//
//      else if Android
//        bluetoothle.discover(discoverSuccess, discoverError)  
//          discoverSuccess()
//            SubscribeBluetoothDevice()
//      end
//
//
//    SubscribeBluetoothDevice()
//      bluetoothle.subscribe(subscribeSuccess, subscribeError, paramsObj)
//
//
//    Rx processing............................................
//    subscribeSuccess()  
//      ProcessNxtyRxMsg()
//
//      
//




var addressKey = "address";
const   TX_MAX_BYTES_PER_CONN   = 20;

//var bridgeServiceUuid           = "6734";

// 128-bit UUID must include the dashes.
// Power cycle phone when changing from 16-bit to 128-bit UUID to remove any local phone storage.
var bridgeServiceUuid           = "48d60a60-f000-11e3-b42d-0002a5d5c51b";


var bridgeTxCharacteristicUuid  = "6711";       // Tx from the bluetooth device profile, Rx for the phone app.
var bridgeRxCharacteristicUuid  = "6722";       // Rx from our bluetooth device profile, Tx for the phone app.



var scanTimer = null;
var connectTimer = null;
var reconnectTimer = null;
var subscribeTimer = null;

var iOSPlatform = "iOS";
var androidPlatform = "Android";


var BluetoothCnxTimer = null;

var SCAN_RESULTS_SIZE = 62;     // advertisement data can be up to 31 bytes and scan results data can be up to 31 bytes.
var u8ScanResults     = new Uint8Array(SCAN_RESULTS_SIZE);


// Use the following as a global variable, "window.isBluetoothCnx", to determine if connected.
var isBluetoothStarted      = false;    // Check is isBluetoothEnabled after isBluetoothStarted is true...
var isBluetoothEnabled      = false;
var isBluetoothCnx          = false;
var isBluetoothSubscribed   = false;

var u8TxBuff          = new Uint8Array(255);	
var uTxBuffIdx		  = 0;
var uTxMsgLen         = 0;

// StartBluetooth...................................................................................
function StartBluetooth()
{
	PrintLog(10, "BT: Starting bluetooth");
	
	var paramsObj = { "request": true,  "statusReceiver": true };
	bluetoothle.initialize(initializeSuccess, initializeError, paramsObj);
}


function initializeSuccess(obj)
{
  if (obj.status == "enabled")
  {
    // If we initialize successfully, start a loop to maintain a connection...
  	PrintLog(10, "BT: Initialization successful, starting periodic bluetooth maintenance loop...");
  	isBluetoothEnabled = true;
  	BluetoothLoop();
  }
  else
  {
    PrintLog(99, "BT: Unexpected initialize status: " + obj.status);
  }
  
  isBluetoothStarted = true;
}

function initializeError(obj)
{
  PrintLog(99, "BT: Initialize error: " + obj.error + " - " + obj.message);
  isBluetoothEnabled = false;
  isBluetoothStarted = true;
}



// BluetoothLoop...................................................................................
// Check every 5 seconds if not connected and subscribed and every 15 seconds if already connected...
function BluetoothLoop()
{
	bluetoothle.isConnected( isConnectedCallback );

}

function isConnectedCallback(obj)
{
	if(obj.isConnected)
	{
		PrintLog(10, "BT: bluetooth cnx callback: Cnx" );
		UpdateBluetoothIcon( true );
		
		// Check again in 15 seconds since we are connected...
        BluetoothCnxTimer = setTimeout(BluetoothLoop, 15000);
        
		if( isBluetoothSubscribed == false )
		{
		  // Run Discover and if successful then subscribe to the Tx of our device
		  DiscoverBluetoothDevice();	
		}
	}
	else
	{
	    PrintLog(10, "BT: bluetooth cnx callback: Not Cnx" );
		UpdateBluetoothIcon( false );
		  
        // Check again in 5 seconds...
        BluetoothCnxTimer = setTimeout(BluetoothLoop, 5000);
    
	    StartBluetoothScan();
	}
}



// StartScan.....................................................................................
function StartBluetoothScan()
{
	PrintLog(10, "BT: Starting scan for Cel-Fi devices.");
    var paramsObj = {"serviceAssignedNumbers":[bridgeServiceUuid]};
    bluetoothle.startScan(startScanSuccess, startScanError, paramsObj);
}

function startScanSuccess(obj)
{
  if (obj.status == "scanResult")
  {
    PrintLog(10, "BT: Scan match: " + JSON.stringify(obj) );
  
    var bytes = bluetoothle.encodedStringToBytes(obj.advertisement);

    // The returned bytes are...
    // [0]                                                                [24]                       [28]
    // "2 1 6 11 6 1b c5 d5 a5 02 00 2d b4 e3 11 00 F0 60 0A D6 48 07 ff 0 1 xx yy 25 29 7 9 43 65 6c 2d 46 69 3 2 34 67 5 ff 0 1 xx yy
    //  |    advertise data                                                            | |             scan results                   |
    //                                                                     ^ ^  ^  ^  ^                                         ^ ^  ^
    //                                                                     | SW Ver|  Rx Handle                                 | |  |
    //                                                                     |       Tx Handle                                    | SW Version
    //                                                                    ICD                                                  ICD

            
    // Save the Scan Results data...
    if( bytes.length != 0 )
    {
        for( var i = 0; i < SCAN_RESULTS_SIZE; i++ )
        {
            if( i < bytes.length )
            {
                u8ScanResults[i] = bytes[i];
            }
        }
    }
 
    // Grab the ICD version and SW Version at fixed locations.
    // jdo todo:  Read the DevInfo SW version instead of the advertising data.
    if( window.device.platform == iOSPlatform )
    {
        uIcd        = u8ScanResults[1];
        swVerBtScan = U8ToHexText(u8ScanResults[2]) + "." + U8ToHexText(u8ScanResults[3]);
    }
    else 
    {
        uIcd        = u8ScanResults[24];
        swVerBtScan = U8ToHexText(u8ScanResults[25]) + "." + U8ToHexText(u8ScanResults[26]);
    }
 
    var outText = u8ScanResults[0].toString(16);    // Convert to hex output...
    for( i = 1; i < u8ScanResults.length; i++ )
    {
        outText = outText + " " + u8ScanResults[i].toString(16);
    }
    PrintLog(10,  "Msg Advertise: " + outText );
 
 
 
    bluetoothle.stopScan(stopScanSuccess, stopScanError);
    clearScanTimeout();

    window.localStorage.setItem(addressKey, obj.address);
    
    ConnectBluetoothDevice(obj.address);
  }
  else if (obj.status == "scanStarted")
  {
    PrintLog(10, "BT: Scan was started successfully, stopping in 4 sec.");
    scanTimer = setTimeout(scanTimeout, 4000);
  }
  else
  {
    PrintLog(99, "BT: Unexpected start scan status: " + obj.status);
  }
}

function startScanError(obj)
{
  PrintLog(99, "BT: Start scan error: " + obj.error + " - " + obj.message);
}

function scanTimeout()
{
  PrintLog(10, "BT: Scanning time out, stopping");
  bluetoothle.stopScan(stopScanSuccess, stopScanError);
}

function clearScanTimeout()
{ 
  PrintLog(10, "BT: Clearing scanning timeout");
  if (scanTimer != null)
  {
    clearTimeout(scanTimer);
  }
}

function stopScanSuccess(obj)
{
  if (obj.status == "scanStopped")
  {
    PrintLog(10, "BT: Scan was stopped successfully");
  }
  else
  {
    PrintLog(10, "BT: Unexpected stop scan status: " + obj.status);
  }
}

function stopScanError(obj)
{
  PrintLog(99, "BT: Stop scan error: " + obj.error + " - " + obj.message);
}



// UpdateBluetoothIcon....................................................................................
function UpdateBluetoothIcon(cnx)
{
	if(cnx == true)
	{
		if( document.getElementById("bt_icon_id").innerHTML != szBtIconOn )
		{
			document.getElementById("bt_icon_id").innerHTML = szBtIconOn;
		}
		isBluetoothCnx = true;
	}
	else
	{
		if( document.getElementById("bt_icon_id").innerHTML != szBtIconOff )
		{
			document.getElementById("bt_icon_id").innerHTML = szBtIconOff;
		}
		isBluetoothCnx        = false;
		isBluetoothSubscribed = false;
		u8ScanResults[0]      = 0;
	}
}



// ConnectBluetoothDevice...................................................................................
// Per plugin: Connect to a Bluetooth LE device. The Phonegap app should use a timer to limit the 
// connecting time in case connecting is never successful. Once a device is connected, it may 
// disconnect without user intervention. The original connection callback will be called again 
// and receive an object with status => disconnected. To reconnect to the device, use the reconnect method. 
// Before connecting to a new device, the current device must be disconnected and closed. 
// If a timeout occurs, the connection attempt should be canceled using disconnect().
function ConnectBluetoothDevice(address)
{
  PrintLog(10, "BT: Begin connection to: " + address + " with 5 second timeout");
  
  var paramsObj = {"address":address};
  bluetoothle.connect(connectSuccess, connectError, paramsObj);
  connectTimer = setTimeout(connectTimeout, 5000);
}

function connectSuccess(obj)
{
  if (obj.status == "connected")
  {
    PrintLog(10, "BT: Connected to : " + obj.name + " - " + obj.address);

	// Update the bluetooth icon...
	UpdateBluetoothIcon( true );

    clearConnectTimeout();
    
    // Must run Discover before subscribing...
    DiscoverBluetoothDevice();
   
  }
  else if (obj.status == "connecting")
  {
    PrintLog(10, "BT: Connecting to : " + obj.name + " - " + obj.address);
  }
  else
  {
    PrintLog(99, "BT: Unexpected connect status: " + obj.status);
    
    if( obj.status == "disconnected" )
    {
    	CloseBluetoothDevice();
    }
    clearConnectTimeout();
  }
}

function connectError(obj)
{
  PrintLog(99, "BT: Connect error: " + obj.error + " - " + obj.message);
  clearConnectTimeout();
  CloseBluetoothDevice();
}

function connectTimeout()
{
  PrintLog(1, "BT: Connection timed out");
  DisconnectBluetoothDevice();
}

function clearConnectTimeout()
{ 
  PrintLog(10, "BT: Clearing connect timeout");
  if (connectTimer != null)
  {
    clearTimeout(connectTimer);
  }
}



// DisconnectBluetoothDevice...................................................................................
function DisconnectBluetoothDevice()
{
  bluetoothle.disconnect(disconnectSuccess, disconnectError);
}

function disconnectSuccess(obj)
{
    if (obj.status == "disconnected")
    {
        PrintLog(10, "BT: Disconnect device success");
        
        // Update the bluetooth icon...
        UpdateBluetoothIcon( false );

        CloseBluetoothDevice();
    }
    else if (obj.status == "disconnecting")
    {
        PrintLog(10, "BT: Disconnecting device");
    }
    else
  	{
    	PrintLog(99, "BT: Unexpected disconnect status: " + obj.status);
  	}
}

function disconnectError(obj)
{
  PrintLog(99, "BT: Disconnect error: " + obj.error + " - " + obj.message);
}


// CloseBluetoothDevice...................................................................................
function CloseBluetoothDevice()
{
  bluetoothle.close(closeSuccess, closeError);
}

function closeSuccess(obj)
{
    if (obj.status == "closed")
    {
        PrintLog(10, "BT Closed device");
        UpdateBluetoothIcon( false );
    }
    else
  	{
      PrintLog(99, "BT: Unexpected close status: " + obj.status);
  	}
}

function closeError(obj)
{
  PrintLog(99, "BT: Close error: " + obj.error + " - " + obj.message);
}




// DiscoverBluetoothDevice........................................................................
function DiscoverBluetoothDevice()
{
    if( window.device.platform == iOSPlatform )
    {
        PrintLog(10, "BT:  IOS platform.  Begin search for bridge service");
        var paramsObj = {"serviceUuids":[bridgeServiceUuid]};
        bluetoothle.services(servicesIosSuccess, servicesIosError, paramsObj);
    }
    else if( window.device.platform == androidPlatform )
    {
        PrintLog(10, "BT:  Android platform.  Beginning discovery");
        bluetoothle.discover(discoverSuccess, discoverError);
    }
}



// IOS only ...................................................................................................
function servicesIosSuccess(obj)
{
    if( obj.status == "discoveredServices" )
    {
        PrintLog(10, "BT: IOS Service discovered: " + JSON.stringify(obj));
        var serviceUuids = obj.serviceUuids;
        for( var i = 0; i < serviceUuids.length; i++ )
        {
            var serviceUuid = serviceUuids[i];
        
            if( serviceUuid == bridgeServiceUuid )
            {
              PrintLog(10, "BT:  IOS platform.  Finding bridge characteristics...");
              var paramsObj = {"serviceUuid":bridgeServiceUuid, "characteristicUuids":[bridgeTxCharacteristicUuid, bridgeRxCharacteristicUuid]};
              bluetoothle.characteristics(characteristicsIosSuccess, characteristicsIosError, paramsObj);
              return;
            }
        }
            
        PrintLog(99, "Bridge service not found");
    }
    else
    {
        PrintLog(99, "Unexpected services bridge status: " + obj.status);
    }
      
    DisconnectBluetoothDevice();
}

function servicesIosError(obj)
{
    PrintLog(99, "Services bridge error: " + obj.error + " - " + obj.message);
    DisconnectBluetoothDevice();
}



function characteristicsIosSuccess(obj)
{
  
    if( obj.status == "discoveredCharacteristics" )
    {
        PrintLog(10, "BT: IOS Characteristics discovered: " + JSON.stringify(obj));
        var characteristics = obj.characteristics;
        for( var i = 0; i < characteristics.length; i++ )
        {
            var characteristicUuid = characteristics[i].characteristicUuid;

            if( characteristicUuid == bridgeRxCharacteristicUuid )
            {
                var paramsObj = {"serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeRxCharacteristicUuid};
                bluetoothle.descriptors(descriptorsIosRxSuccess, descriptorsIosRxError, paramsObj);
                return;
            }
            
        }
    }
    else
    {
        PrintLog(99, "Unexpected characteristics bridge status: " + obj.status);
    }

    PrintLog(99, "BT: IOS No Rx Characteristic found: " + JSON.stringify(obj));
    DisconnectBluetoothDevice();
}

function characteristicsIosError(obj)
{
    PrintLog(99, "Characteristics bridge error: " + obj.error + " - " + obj.message);
    DisconnectBluetoothDevice();
}


function descriptorsIosRxSuccess(obj)
{
    if (obj.status == "discoveredDescriptors")
    {
        PrintLog(10, "BT: Rx Discovery completed.  Name: " + obj.name + " add: " + obj.address + "stringify: " + JSON.stringify(obj));
        var paramsObj = {"serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeTxCharacteristicUuid};
        bluetoothle.descriptors(descriptorsIosTxSuccess, descriptorsIosTxError, paramsObj);        
    }
    else
    {
        PrintLog(99, "Unexpected Rx descriptors bridge status: " + obj.status);
        DisconnectBluetoothDevice();
    }
}


function descriptorsIosRxError(obj)
{
    PrintLog(99, "Descriptors Rx Bridge error: " + obj.error + " - " + obj.message);
    DisconnectBluetoothDevice();
}



function descriptorsIosTxSuccess(obj)
{
    if (obj.status == "discoveredDescriptors")
    {
        PrintLog(10, "BT: Tx Discovery completed, now subscribe.  Name: " + obj.name + " add: " + obj.address + "stringify: " + JSON.stringify(obj));

        // Now subscribe to the bluetooth tx characteristic...
        SubscribeBluetoothDevice();
    }
    else
    {
        PrintLog(99, "Unexpected Tx descriptors bridge status: " + obj.status);
        DisconnectBluetoothDevice();
    }
}


function descriptorsIosTxError(obj)
{
    PrintLog(99, "Descriptors Tx Bridge error: " + obj.error + " - " + obj.message);
    DisconnectBluetoothDevice();
}
// End IOS only ...............................................................................................


// Android only ...............................................................................................
function discoverSuccess(obj)
{
	if (obj.status == "discovered")
    {
    	PrintLog(10, "BT: Discovery completed.  Name: " + obj.name + " add: " + obj.address + "stringify: " + JSON.stringify(obj));

    	// Now subscribe to the bluetooth tx characteristic...
    	SubscribeBluetoothDevice();

        // Start subscribing for the notifications in 1 second to allow any connection changes
        // to take place.
//    	subscribeTimer = setTimeout(SubscribeBluetoothDevice, 1000);
	}
  	else
  	{
    	PrintLog(99, "BT: Unexpected discover status: " + obj.status);
    	DisconnectBluetoothDevice();
  	}
}

function discoverError(obj)
{
  PrintLog(99, "Discover error: " + obj.error + " - " + obj.message);
  DisconnectBluetoothDevice();
}
// End Android only ...............................................................................................





// SubscribeBluetoothDevice........................................................................
//  Subscribe means to listen on this UUID, i.e. channel, from the BLE device.
function SubscribeBluetoothDevice()
{
    // Version 1.0.2 of the plugin
    var paramsObj = {"serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeTxCharacteristicUuid, "isNotification":true};
	
    bluetoothle.subscribe(subscribeSuccess, subscribeError, paramsObj);
}


function subscribeSuccess(obj)
{   
    if (obj.status == "subscribedResult")
    {
        PrintLog(10, "BT: Subscription data received");

        var bytes = bluetoothle.encodedStringToBytes(obj.value);
 
		nxty.ProcessNxtyRxMsg( bytes, bytes.length );


        
		
/*
        //Parse array of int32 into uint8
        var bytes = bluetoothle.encodedStringToBytes(obj.value);

        //Check for data
        if (bytes.length == 0)
        {
            PrintLog(10, "BT: Subscription result had zero length data");
            return;
        }

        //Get the first byte that contains flags
        var flag = bytes[0];

        //Check if u8 or u16 and get heart rate
        var hr;
        if ((flag & 0x01) == 1)
        {
            var u16bytes = bytes.buffer.slice(1, 3);
            var u16 = new Uint16Array(u16bytes)[0];
            hr = u16;
        }
        else
        {
            var u8bytes = bytes.buffer.slice(1, 2);
            var u8 = new Uint8Array(u8bytes)[0];
            hr = u8;
        }
        PrintLog(10, "Heart Rate: " + hr);
*/        
        
    }
    else if (obj.status == "subscribed")
    {
        PrintLog(10, "BT: Subscription started");
		isBluetoothSubscribed = true;
    }
    else
  	{
    	PrintLog(99, "BT: Unexpected subscribe status: " + obj.status);
    	DisconnectBluetoothDevice();
  }
}

function subscribeError(msg)
{
  	PrintLog(99, "BT: Subscribe error: " + msg.error + " - " + msg.message);
}

function unsubscribeDevice()
{
  PrintLog(10, "BT: Unsubscribing bridge service");
  var paramsObj = {"serviceAssignedNumber":bridgeServiceUuid, "characteristicAssignedNumber":bridgeTxCharacteristicUuid};
  bluetoothle.unsubscribe(unsubscribeSuccess, unsubscribeError, paramsObj);
}

function unsubscribeSuccess(obj)
{
    if (obj.status == "unsubscribed")
    {
        PrintLog(10, "BT: Unsubscribed device");
    	isBluetoothSubscribed = false;
    }
    else
    {
      PrintLog(99, "BT: Unexpected unsubscribe status: " + obj.status);
      DisconnectBluetoothDevice();
    }
}

function unsubscribeError(obj)
{
  PrintLog(99, "BT: Unsubscribe error: " + obj.error + " - " + obj.message);
  DisconnectBluetoothDevice();
}




// WriteBluetoothDevice........................................................................
function WriteBluetoothDevice( u8 )
{
	var i;

	// Currently the Bluetoothle plugin supports a write of TX_MAX_BYTES_PER_CONN bytes.
	if( u8.length > u8TxBuff.length )
	{
		PrintLog(10, "Nxty Write: More than " + NXTY_BIG_MSG_SIZE + " bytes." );
	}

    uTxMsgLen = u8.length;
	if( uTxMsgLen <= TX_MAX_BYTES_PER_CONN )
	{
    	// Convert a Unit8Array to a base64 encoded string...
    	var u64    = bluetoothle.bytesToEncodedString(u8);
    	uTxBuffIdx = 0;
    	
    	var outText = u8[0].toString(16);    // Convert to hex output...
        for( i = 1; i < uTxMsgLen; i++ )
        {
            outText = outText + " " + u8[i].toString(16);
        }
        PrintLog(2,  "Msg Tx: " + outText );
   	}
   	else
   	{
		for( i = 0; i < uTxMsgLen; i++ )
		{
			u8TxBuff[i] = u8[i];
		}
		
		uTxBuffIdx = TX_MAX_BYTES_PER_CONN;
		var u8Sub  = u8TxBuff.subarray(0,uTxBuffIdx);	// u8TxBuff[0] to [TX_MAX_BYTES_PER_CONN-1].
		var u64    = bluetoothle.bytesToEncodedString(u8Sub); 

		
		// Send the first TX_MAX_BYTES_PER_CONN bytes of data..
        var outText = u8Sub[0].toString(16);    // Convert to hex output...
        for( i = 1; i < uTxBuffIdx; i++ )
        {
            outText = outText + " " + u8Sub[i].toString(16);
        }
        PrintLog(2,  "Msg Tx: " + outText );
		
   	}

    // 1.0.2 of the plugin 
//    var paramsObj = {"value":u64, "serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeRxCharacteristicUuid};

    // 1.0.6 of the plugin (added noResponse)
    if( window.device.platform == androidPlatform )
    {
        var paramsObj = {"value":u64, "serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeRxCharacteristicUuid, "type":"noResponse"};
    }
    else if( window.device.platform == iOSPlatform )
    {
        // If bluetooth version is 01.00 then use Response, otherwise we can use the faster no response.
        // Problem is that in version 01.00 of the bluetooth code I did not set the WRITE-NO-RESPONSE bit.
        if( swVerBtScan.localeCompare("01.00") == 0 ) 
        {
            PrintLog(1,  "IOS Msg Tx using slow WRITE with response" );
                    
            // Version 01.00: Use WRITE with response, slower
            var paramsObj = {"value":u64, "serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeRxCharacteristicUuid};
        }
        else
        {
        
            PrintLog(1,  "IOS Msg Tx using fast WRITE with NO response" );
        
            // Use WRITE-NO-RESPON, faster.
            var paramsObj = {"value":u64, "serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeRxCharacteristicUuid, "type":"noResponse"};
        }
    }
    
    bluetoothle.write(writeSuccess, writeError, paramsObj);
}


function writeSuccess(obj)
{   
    // {"status":"written","serviceUuid":"180F","characteristicUuid":"2A19","value":""};
    if (obj.status == "written")
    {
        PrintLog(10, "BT: Write data sent successfully");
        
        // See if we have more to output...
        if( uTxBuffIdx )
        {
        	var uTxBuffIdxEnd = uTxBuffIdx + TX_MAX_BYTES_PER_CONN;
        	if( uTxBuffIdxEnd > uTxMsgLen )
        	{
        		uTxBuffIdxEnd = uTxMsgLen;
        	}
        	
			var u8Sub  = u8TxBuff.subarray(uTxBuffIdx, uTxBuffIdxEnd);	
			var u64    = bluetoothle.bytesToEncodedString(u8Sub); 

	        var outText = u8Sub[0].toString(16);    // Convert to hex output...
    	    for( var i = 1; i < (uTxBuffIdxEnd - uTxBuffIdx); i++ )
        	{
            	outText = outText + " " + u8Sub[i].toString(16);
        	}
        	PrintLog(2,  "Msg Tx: " + outText );

		    // 1.0.2 of the plugin 
//    		var paramsObj = {"value":u64, "serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeRxCharacteristicUuid};
    
            // 1.0.6 of the plugin (added noResponse)
            var paramsObj = {"value":u64, "serviceUuid":bridgeServiceUuid, "characteristicUuid":bridgeRxCharacteristicUuid, "type":"noResponse"};    
    
    		bluetoothle.write(writeSuccess, writeError, paramsObj);
    		
    		uTxBuffIdx = uTxBuffIdxEnd;
        	if( uTxBuffIdx >= uTxMsgLen )
        	{
        		// Indicate that we have sent all data...
        		uTxBuffIdx = 0;
        	}
    		
   		}
        
    }
    else
    {
        PrintLog(99, "BT: Unexpected write status: " + obj.status);
    }
}

function writeError(msg)
{
    PrintLog(99, "BT: Write error: " + msg.error + " - " + msg.message);
}














